@using System.Xml.Linq
@using BannerDataDictionary.Models
@model IList<BannerDataDictionary.Models.Table>
@{
    var linkedServerName = Request.QueryString.Get("LinkedServerName") as string ?? "SIS";
    var databaseOwnerName = Request.QueryString.Get("Owner") ?? "SATURN";
    var includeEmptyTablesValue = Request.QueryString.Get("IncludeEmptyTables");
    var numTables = Request.QueryString.Get("NumTables");
    var includeEmptyTables = false;
    var invertedIncludeEmptyTables = true;
    const string includePrefix = "Include";
    const string excludePrefix = "Exclude";
    var prefix = includePrefix;

    if (!String.IsNullOrEmpty(includeEmptyTablesValue))
    {
        if (!Boolean.TryParse(includeEmptyTablesValue, out includeEmptyTables))
        {
            includeEmptyTables = false;
        }

        if (includeEmptyTables)
        {
            prefix = excludePrefix;
            invertedIncludeEmptyTables = false;
        }
    }

    var databaseOwner = new BannerDataDictionary.Models.DatabaseOwner
        {
            LinkedServerName = linkedServerName,
            Owner = databaseOwnerName,
            IncludeEmptyTables = includeEmptyTables,
            NumTables = numTables
        };
}

@{
    ViewBag.Title = "Tables";
}

@Styles.Render("~/Content/DataTables-1.9.4/media/css/dataTables")

@section subhead
{
    <h1>@ViewBag.Message</h1>

    <div>
        <p>A listing of Oracle Tables</p>

        @{
            <i>
                @Html.ActionLink("(" + prefix + " Empty Tables)", "Index", "Tables",
                                 new BannerDataDictionary.Models.DatabaseOwner
                                     {
                                         LinkedServerName = linkedServerName,
                                         Owner = databaseOwnerName,
                                         IncludeEmptyTables = invertedIncludeEmptyTables,
                                         NumTables = numTables
                                     }
                                 , null)
            </i>
        }

    </div>
}


@*@section subnav
{
    <li>@Html.ActionLink("Sample Index", "Index")</li>
    <li>@Html.ActionLink("Form", "Form")</li>
    <li>@Html.ActionLink("Table", "Table")</li>
    <li class="active">@Html.ActionLink("Data Tables", "DataTable")</li>
    <li>@Html.ActionLink("Display Form", "DisplayForm")</li>
}*@

@section AdditionalScripts
{
    @Scripts.Render("~/bundles/datatables")

    <script type="text/javascript">
        $(function () {
            $(".table").dataTable({
                "aaSorting": [[1, "asc"]], //Default sort on second column
                //"aoColumnDefs": [
                //    { 'bSortable': false, 'aTargets': [0] } //Disables sort on icon columns
                //]
            });
        });
    </script>

}

<table class="table table-striped table-bordered table-hover">
    <thead>
        <tr>
            <th>Linked Server</th>
            <th>Owner</th>
            <th>Name</th>
            <th>Comments</th>
            <th>Num Rows</th>
            <th>Table Type</th>
        </tr>
    </thead>
    <tbody>

        @foreach (var item in Model)
        {
            <tr>
                @*<td>@item.LinkedServerName</td>*@
                <td>@Html.ActionLink(item.LinkedServerName, "Index", "Owners", new BannerDataDictionary.Models.LinkedServer
                    {
                        Name = @item.LinkedServerName,
                        DatabaseOwners = new List<DatabaseOwner>
                            {
                                databaseOwner
                            }
                    }, null)</td>
                <td>@item.Owner</td>
                @*<td>@Html.ActionLink(item.Owner, "Index", "Tables", databaseOwner, null)</td>*@
                <td>@Html.ActionLink(item.TableName, "Details", "Tables", new BannerDataDictionary.Models.Table
                    {
                        LinkedServerName = item.LinkedServerName,
                        Owner = item.Owner,
                        TableName = item.TableName
                    }, null)</td>
                <td>@if (@item.Comments != null && @item.Comments.Contains("<cmt>"))
                    {
                    <ul>
                        @{
                        var myDoc = XDocument.Parse(@item.Comments);
                        foreach (var node in myDoc.Descendants().Where(x => x.Name != "cmt"))
                        {
                            <li>
                                <strong>@node.Name.ToString().ToUpper():</strong> @node.Value
                            </li>
                        }
                        }
                    </ul>
                    }
                    else
                    {
                        @item.Comments
                    }
                </td>
                <td>@item.NumRows</td>
                <td>@item.TableType</td>
            </tr>
        }

    </tbody>
</table>
